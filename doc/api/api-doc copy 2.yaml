openapi: 3.0.0
info:
  title: API de Ejemplo
  description: API para gestionar usuarios y productos
  version: 1.0.0
  contact:
    name: Soporte de API
    email: soporte@api.com

servers:
  - url: http://localhost:3000/api
    description: Servidor local de desarrollo

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer

security:
  - BearerAuth: []
tags:
  - name: Usuarios
    description: Operaciones relacionadas con la gestión de usuarios
  - name: Productos
    description: Operaciones relacionadas con la gestión de productos
  - name: Auth
    description: Operaciones relacionadas con la autenticacion

paths:
  /users:
    get:
      summary: Obtener todos los usuarios
      tags:
        - Usuarios
      security:
        - BearerAuth: []
      responses:
        200:
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Crear un nuevo usuario
      tags:
        - Usuarios
      requestBody:
        description: Datos del nuevo usuario
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Usuario creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      summary: Obtener un usuario por ID
      tags:
        - Usuarios
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Actualizar un usuario por ID
      tags:
        - Usuarios
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Datos actualizados del usuario
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Usuario actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Eliminar un usuario por ID
      tags:
        - Usuarios
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Usuario eliminado
        404:
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products:
    get:
      summary: Obtener todos los productos
      tags:
        - Productos
      responses:
        200:
          description: Lista de productos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Crear un nuevo producto
      tags:
        - Productos
      requestBody:
        description: Datos del nuevo producto
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        201:
          description: Producto creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{id}:
    get:
      summary: Obtener un producto por ID
      tags:
        - Productos
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Producto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Actualizar un producto por ID
      tags:
        - Productos
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Datos actualizados del producto
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: Producto actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Eliminar un producto por ID
      tags:
        - Productos
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Producto eliminado
        404:
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Iniciar sesión
      tags:
        - Auth
      requestBody:
        description: Credenciales de inicio de sesión
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Autenticación exitosa
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      summary: Registrarse
      tags:
        - Auth
      requestBody:
        description: Datos para registrarse
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Registro exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
